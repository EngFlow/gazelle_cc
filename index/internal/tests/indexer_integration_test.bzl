"""
Framework for testing indexer integration in end to end test
"""

load("@rules_go//go:def.bzl", "go_test")

# Bazel macro rule for testing indexer integration, assumes following layout:
# - testcases/
# |--- <test_case_dir_0>/
# |  |-- BUILD
# |  |-- MODULE.bazel
# |  |-- expected.ccindex
# |  |-- **/*.{c,cc,cpp,h,hpp} (buildable C sources)
# |--- <test_case_dir_n>/
# |  | -- ....
#
# indexer_binary_path needs to point to indexer binary that would be invoked by the test. 
# Indexer needs to implement the common flags listed in index/internal/indexer/cli/cli.go and write the output to 'generated.ccidx' file (specified by --output flag).
# Generated index would be compared with `expected.ccindex`
# gazelle_binary_path need to point gazelle_binary that would be invoked on the build. It would be invoked in the test_case directory. It needs to enable gazelle_cc extension.
# As the last step test invoked `bazel build //...` in the directory on the targets generated by the gazelle_binary
# At least 1 of `srcs` needs to invoke `ExecuteIndexerIntegrationTest(*testing.T, IndexerIntegration)` function. 
def indexer_integration_test(
        name,
        gazelle_binary_path,
        indexer_binary_path,
        srcs = [],
        data = [],
        deps = [],
        tags = [],
        **kwargs):
    go_test(
        name = name,
        timeout = "eternal",
        srcs = srcs,
        args = [
            "--gazelle_binary_path=$(rlocationpath %s)" % gazelle_binary_path,
            "--indexer_binary_path=$(rlocationpath %s)" % indexer_binary_path,
        ],
        data = data + [gazelle_binary_path, indexer_binary_path, ":testcases"],
        deps = deps + [
            "//index/internal/tests",
            "@rules_go//go/runfiles",
        ],
        tags = tags + ["manual"],
        **kwargs
    )
